// version 3

/*
/////////////////////////////////////////////
// moved this into the nf script
process {

	withName: GATK4_HAPLOTYPECALLER {
	ext.args = '-ploidy ${params.ploidy} --do-not-run-physical-phasing true --disable-read-filter WellformedReadFilter'

 	// recompiled ngmlr from source
	container = 'procho/ont-pipe:ngmlrOverflowFixSamtoolsCmdLine'  
}
//////////////////////////////////////////////
*/

// Global default params, used in configs
params {
   max_cpus                    = 16
   max_memory                  = "20.GB"
   max_time                    = "40.h"
}

// Load base.config (contains some label resources configurarion)
includeConfig 'conf/base.config'

docker {
       enabled = true
       //container = "name"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
